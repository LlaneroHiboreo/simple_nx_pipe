params{
    /* INPUT SEQS */
    input_path = "$baseDir/RawSeqs/*.fastq.gz"
    pairs_path = "$baseDir/RawSeqs/*_{R1,R2}.fastq.gz"

    /* RESULT OUTDIRS */
    outdir_fastqc     =   "results/qualityControl/fastqc/"
    outdir_multiqc    =   "results/qualityControl/multiqc/"
    outdir_bbMerge    =   "results/mergeReformat/merge/"
    outdir_bbReformat =   "results/mergeReformat/reformat/"
    outdir_merforQC   =   "results/mergeReformat/fastQC/"
    output_multiqc    =   "results/multiqc/
    /* Libraries/Databases */
    fwd_prim          =   "$baseDir/bin/forward_primers.fa"
    rev_prim          =   "$baseDir/bin/reverse_primers.fa"
    phix_adapters     =   "$baseDir/bin/phiX.fa"
    chimers_db        =   "$baseDir/bin/Silva_Gold.fa"
    silvia_train      =   "$baseDir/bin/silva_nr99_v138.1_train_set.fa.gz"
    silvia_assignment =   "$baseDir/bin/silva_species_assignment_v138.1.fa.gz"

    /* Commands Tunning */
    //bbMerge
    merged_min_len    =   250
    merged_qtrim      =   "t"
    merged_status     =   "t"
    merged_minq       =   27
    merged_mismatches =   2
    reformat_maxns    =   0

    //Cutadapt
    min_fwd_len       =   15
    min_rev_len       =   15
    fwd_overlap       =   3
    rev_overlap       =   3
    cutadp_threads    =   8

    //Chimers
    kmers             =   31
    chimera_threads   =   17


    //###########################################################
    //PARAMETERS for CPUS PROCESSES/
    cpus_fastqc       =     4  //qualityControl
    cpus_multiqc      =     4  //qualityControl
    cpus_bbmerge      =     2  //mergeFormat
    cpus_bbreformat   =     2  //mergeFormat
    cpus_merforq      =     2  //mergeFormat
    cpus_bb_fastqc    =     2  //mergeFormat
    cpus_cut_for      =     3  //cutAdapt
    cpus_cut_rev      =     3  //cutAdapt
    cpus_phix         =     2  //phixChim
    cpus_chim         =     4  //phixChim

    memory_bbreformat =     2.GB
    memory_bbmerge    =     2.GB
    memory_merforqc   =     2.GB
    memory_cutadaptfor=     2.GB
    memory_cutadaptrev=     2.GB
    memory_remphix    =     2.GB
    memory_chimeras   =     6.GB
    memory_multiqc    =     2.GB
    memory_fastqc     =     2.GB

}

process{
    /*###################################
            //DOCKER IMAGES//
    /####################################*/

    withLabel:fastqc{
        container   =   'danova/fastqc' //Docker image fastqc
    }

    withName:multiQC{
        container   =   'danova/multiqc:latest'  //Docker image multiqc
    }

    withLabel:bbtools{
        container   =   'danova/bbmap:latest' //Docker image bbtools
    }

    withLabel:cutadapt{
        container   =   'danova/cutadapt:latest' //Docker image cutadapt
    }

    withLabel:vsearch{
        container   =   'danova/vsearch:latest' //Docker image vsearch
    }



    /*###################################
            //PROCESS SETTINGS//
    /####################################*/
    withName:fastQC{
        cpus        =    params.cpus_fastqc
        memory      =    params.memory_fastqc
        maxRetries  =    3
        errorStrategy =  {task.attempt <= 3 ? 'retry' : 'finish'}
    }

    withName:multiQC{
        cpus        =    params.cpus_multiqc
        memory      =    params.memory_multiqc
        maxRetries  =    3
        errorStrategy =  {task.attempt <= 3 ? 'retry' : 'finish'}
    }
    withName:bbMerge{
        cpus        =    params.cpus_bbmerge
        memory      =    params.memory_bbmerge
        maxRetries  =    3
        errorStrategy =  {task.attempt <= 3 ? 'retry' : 'finish'}
    }
    withName:bbReformat{
        cpus        =    params.cpus_bbreformat
        memory      =    params.memory_bbreformat
        maxRetries  =    3
        errorStrategy =  {task.attempt <= 3 ? 'retry' : 'finish'}
        }
    withName:merforQC{
        cpus        =    params.cpus_merforq
        memory      =    params.memory_merforqc
        maxRetries  =    3
        errorStrategy =  {task.attempt <= 3 ? 'retry' : 'finish'}
    }
    withName:cutAdaptFor{
        cpus        =    params.cpus_cut_for
        memory      =    params.memory_cutadaptfor
        maxRetries  =    3
        errorStrategy =  {task.attempt <= 3 ? 'retry' : 'finish'}
    }
    withName:cutAdaptRev{
        cpus        =    params.cpus_cut_rev
        memory      =    params.memory_cutadaptrev
        maxRetries  =    3
        errorStrategy =  {task.attempt <= 3 ? 'retry' : 'finish'}
    }
    withName:remPhix{
        cpus        =    params.cpus_phix
        memory      =    params.memory_remphix
        maxRetries  =    3
        errorStrategy =  {task.attempt <= 3 ? 'retry' : 'finish'}
    }
    withName:chimeras{
        cpus        =    params.cpus_chim
        memory      =    params.memory_chimeras
        maxRetries  =    3
        errorStrategy =  {task.attempt <= 3 ? 'retry' : 'finish'}
    }
}


// Enable Docker
docker{
    enabled         =   true //docker: true or false
}

// Generate Workflow Report
report {
    enabled           =   true
    file              =   "results/report/"
}
